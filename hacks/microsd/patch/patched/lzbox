#! /bin/bash

shopt -s gnu_errfmt
shopt -s extglob

function fn_echo_clor() { TEXT="$@"; NL=${NL:-"\n"}; echo -ne "\E[${FG};${BG}m${TEXT}${NL}\E[0m" > /dev/stdout ;}
function fn_echo_fail() { FG=31 BG=40 fn_echo_clor "$@" ;}   # red
function fn_echo_succ() { FG=32 BG=40 fn_echo_clor "$@" ;}   # green
function fn_echo_warn() { FG=33 BG=40 fn_echo_clor "$@" ;}   # yellow

function xt_ret()
{
    [ "${1}" = "0" ] && return 0
    printf "${BASH_SOURCE[1]##*/}%-6s" "|${BASH_LINENO[0]}|"    # no FUNCNAME print
    FG=31 BG=40
    echo -e "\E[${FG};${BG}m${@:2}"
    echo -ne "\E[0m"
    return 1
}

function fn_exe_usage()
{
    echo "Usage:
     ${0##*/} list                 # list all commands
     ${0##*/} {id|key} [value:0]   # exec key command
     ${0##*/} / key                # list key details
    "
}

function fn_execute()
{
    case $1 in
    ''|l|-l|--list)
        fn_exe_usage
        local idx
        for (( idx=0; idx<${#cmdlist[@]}; idx+=1 )); do
            printf " %-4s%s\n" $idx "${cmdlist[${idx}]}"
        done
        echo
        ;;
    [0-9]|[0-9][0-9])
        [ $1 -ge ${#cmdlist[@]} ] && \
        fn_execute --list && fn_echo_fail "  -- fn_execute $1 too big --\n" && return

        cmd=${cmdlist[$1]/ */}
        fn_${cmd} "${@:2}"
        ;;
    /)
        local idx
        for (( idx=0; idx<${#cmdlist[@]}; idx+=1 )); do
            grep -q "${@:2}" <<< "${cmdlist[${idx}]}" &&
            printf " %-4s%s\n" $idx "${cmdlist[${idx}]}"
        done
        ;;
    *)
        local idx
        for (( idx=0; idx<${#cmdlist[@]}; idx+=1 )); do
            cmd=${cmdlist[${idx}]/ */}
            if [ "$1" = "${cmd}" ] ; then
                fn_${cmd} "${@:2}"
                return $?            # avoid _fn_exe_usage_
            fi
        done
        fn_exe_usage "${BASH_SOURCE[1]##*/}|${BASH_LINENO[0]}|"
        ;;
    esac
}

function fn_dec2bin()
{
    dec=${1:-0}
    bin=""
    pro=""

    for (( i=0; i<32; i=(i+1)%10 )); do
        let ret=dec%2
        bin="$ret${bin}"
        pro="${i}${pro}"

        if [ $i = 9 ]; then
            bin=" ${bin}"
            pro=" ${pro}"
        fi

        let dec=dec/2

        if [ "${dec}" = 0 ] || [ "${dec}" = 1 ]; then
            let i=i+1
            let i=i%10
            pro="${i}${pro}"
            bin="$dec${bin}"
            break
        fi
    done

    echo $pro
    echo $bin

    return $?
}

function fn_tog_stat()
{
    oldv=`ccli toggle -act list | awk -F'=' '/stat/{print $2}'`

    if [ -z "${1}" ]; then
        echo "
        enum SYS_STAT {
            FACTORY_UPGRADING   = 1<<0,
            FACTORY_BURNING     = 1<<1,
            FACTORY_TESTING     = 1<<2,
            FACTORY_AUDIOTEST   = 1<<3,
            FACTORY_FORCECOLOR  = 1<<4,
            FACTORY_UPSUCCAUDIO = 1<<5,
            AIRLINK_PLUS300s    = 1<<7,
            AIRLINK_DHCPSUCC    = 1<<8,
            AIRLINK_DHCPONCE    = 1<<9,
            AIRLINK_MATCHOVER   = 1<<10,
            AIRLINK_MATCHGOT    = 1<<11,
            AIRLINK_RESETING    = 1<<12,
            AIRLINK_CLOUD_CMD   = 1<<13,
            AIRLINK_CLOUD_INIT  = 1<<14,
            AIRLINK_CLOUD_SEND  = 1<<15,
            AIRLINK_CLOUD_AUDI  = 1<<16,
            AIRLINK_AUTHSERVER  = 1<<17,
            AIRLINK_TESTING     = 1<<18,
            AIRLINK_DNS         = 1<<19,
            SERVICE_AUDIOFORCE  = 1<<21,
            SERVICE_REC_READY   = 1<<22,
            SERVICE_REC_FORMAT  = 1<<23,
            SERVICE_TUNNEL      = 1<<24,
            NETWORK_UPGRADING   = 1<<30,    /* awk process 32bit -> 2.14748e+09 */
        };
        "
        fn_dec2bin $oldv
        return
    fi

    case $1 in
      +) sum=`echo ${@:2} | xargs -n1 | awk '{sum+=(2^$1)} END{ print sum }'`; let oldv=oldv+sum ;;
      -) sum=`echo ${@:2} | xargs -n1 | awk '{sum+=(2^$1)} END{ print sum }'`; let oldv=oldv-sum ;;
 [0-9]*) sum=`echo ${@:1} | xargs -n1 | awk '{sum+=(2^$1)} END{ print sum }'`; let oldv=sum      ;;
      *) fn_echo_warn "Usage: toggle stat [+-] x y z..."                     ; exit              ;;
    esac

    ccli toggle -act set -stat ${oldv}

    return $?
}

function fn_toggle()
{
    fn_list()       {                                ccli toggle -act list                          ;}
    fn_bar()        { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_foo()        { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_code()       { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_stat()       { fn_tog_stat ${*}                                                              ;}
    fn_wifi()       { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_encode()     { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_danale()     { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_search()     { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_jcpinfo()    { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_recdebug()   { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_reclelve()   { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} ${1:-0} ;}
    fn_itoken()     { echo ${FUNCNAME##fn_}=${1:-0}; ccli toggle -act set -${FUNCNAME##fn_} \"$*\"  ;}

    cmdlist=(                    # align
    "list                        # toggle -act list"
    "bar            fd           # get and set socket fd SNDBUF RCVBUF"
    "foo            1            # DISABLE truncate audio buffer to .4s"
    "code           1            # debug: info
                    4            # debug: LED dana
                    8            # &disable calc_cpu_usage
                    41|42|43|44  # Http.start | stop | Stream.start | stop
                    70|71        # night|day ircut
                    101~114      # play pcm 01.pcm~14.pcm
                    200          # audio-code-matched
                    201          # audio-queue
                    202          # audio-paly-buffer-stat: free|busy
                    1001         # _____ toggle_redirect() _____
                    1090         # _____ toggle truncate() /tmp/messages.dot
                    1280         # 2^10+2^8 = code -gt 1280 are allow bit operator
                    1281         # print info of play-realtime-stream
                    1282         # print info of play-prompt-2-pcm
                    1284         # record Phone to file /tmp/phone.pcm
                    1288         # record Mic   to file /tmp/mic.pcm
                    1296         # record aLaw  to file /tmp/audi.pcm
                    2000         # "
    "stat           [+-] x y z...# +- (2^x) or = (2^x)"
    "wifi           1|2|4|8      # wifi {ON|OFF|STAT|DOGFREE}
                    16           # is_alive_ip ping result"
    "encode         1            # hb.common
                    2            # ir & ADC
                    4            # EV & gain & expo
                    8            # use static ircut-factor 1
                    32           # print ircut exit lineno"
    "danale         1            # dbg_on/dbg_off
                    2            # DBG
                    4            # print fw_ver"
    "search         1            # all-commands
                    2            # cached-8-commands"
    "jcpinfo        1            # "
    "recdebug       1            # "
    "reclevel       1            # "
    "itoken         string       # string"
    )

    fn_execute "$@"
}

function fn_telnet()
{
    touch ${local_rc}
    chmod +x ${local_rc}
    if [ "${1}" = 0 ]; then
        sed -i '/telnetd/d' ${local_rc}
        rm -f /tmp/tag.test_ver
    else
        xml_shuttle -i -cw -k /cfg/authmode/mode -v 0 /opt/conf/config.xml
        ccli authmode -act set -mode 0 >& /dev/null

        cmd='telnetd -p24; touch /tmp/tag.test_ver'
        sed -i '/telnetd/d' ${local_rc}
        echo "${cmd}" >> ${local_rc}
        fn_echo_succ "enable telnet port:24 succ, enjoy it!"
        eval ${cmd}
    fi
}

function fn_roll()
{
    file=${1}
    bo=${2:-4}
    let zhong=bo-1

    test -f ${file}
    xt_ret $? "[$1] not exist" || return $?

    for (( i=$zhong,j=$bo; i>0; i-=1,j-=1 )); do
        test -f "${file}.$i" && mv ${file}.$i ${file}.$j
    done

    test -f "${file}" && mv ${file} ${file}.1
}

function fn_sdlog()
{
    pif='/tmp/sdlog.pid'

    fn_sdlog_sync() {
        if ! df | grep -q mmcblk0p1; then
            logger "no sd-card, __exit__ "
            exit
        fi
        dot='/opt/media/mmcblk0p1/messages.dot'
        log='/opt/media/mmcblk0p1/messages'

        ps | awk '/[s]yslogd/{print $1}' | while read PID; do kill -USR2 $PID;   kill -9 $PID; done;
        syslogd -s 256 -S -O /tmp/messages      # 160 bytes/line, 160K = 1000 lines = 2000s = 30min

        while :; do
            touch $log || mount -o remount,rw /dev/mmcblk0p1 /opt/media/mmcblk0p1
            sync_time=`date +%F.%T`

            echo sync_time:${sync_time} >> $log
            cat /tmp/messages >> $log
            > /tmp/messages
            sk=`du -sk $log | awk '{print $1}'`
            [ "${sk:-0}" -gt 10240 ] && fn_roll ${log}

            echo sync_time:${sync_time} >> $dot
            cat /tmp/messages.dot >> $dot
            ccli toggle -act set -code 1090     #  inner clean > /tmp/messages.dot
            sk=`du -sk $dot | awk '{print $1}'`
            [ "${sk:-0}" -gt 10240 ] && fn_roll ${dot}

            sleep 900
        done
    }

    touch ${local_rc}
    chmod +x ${local_rc}

    case $1 in
    'sd_sync')
        touch ${pif}
        while read PID; do kill -9 $PID; done < ${pif}
        fn_sdlog_sync &
        echo "$!" > ${pif}
        ;;
    'rm')
        sed -i '/.yslogd/d' ${local_rc}
        fn_echo_succ "[disable] sdcard syslogd succ, enjoy it!"
        ;;
    *)
        if df | grep -q mmcblk0p1; then
            sed -i '/.yslogd/d' ${local_rc}
            cat <<-"HERE"  >> ${local_rc}
			lzbox sdlog sd_sync                                                                         # syslogd
			HERE
            setsid ${local_rc} &
            ka
            fn_echo_succ "[enable] sdcard syslogd succ, enjoy it!"
        else
            fn_echo_warn "no sdcard, please check!"
        fi
        ;;
    esac

    return $?
}

function fn_ffw()
{
    pack_ffw='/opt/media/mmcblk0p1/ffw.txt'
    file_ffw=${2:-/opt/media/mmcblk0p1/`sed 's/ffw.*/ffw/g' $pack_ffw`}
    temp_ffw='/tmp/.ffw'

    # no quoted, to allow whitespace at end of line
    pwd
    [ -f ${file_ffw} ]
    xt_ret $? "_ ${file_ffw} _ not exist" || return $?

    case $1 in
    600)
        touch /opt/media/mmcblk0p1/en_chn_600s.txt
        ;;
    untar)
        rm -rf /tmp/upgrade.tgz

        tail -c21 "${file_ffw}" > ${temp_ffw}
        timestamp=`tail -c19 ${temp_ffw}`

        echo $timestamp | grep -q '^20..-..-..'
        xt_ret $? "Error: [$timestamp] not format[2008-08-08]" || return $?

        nr_dev_type=`head -c2 ${temp_ffw}`
        let nr_tail=$nr_dev_type+21

        dev_type=`tail -c$nr_tail "${file_ffw}" | head -c$nr_dev_type`
        xt_ret $? "" || return $?

        [ "${dev_type}" = `cat /ipc/etc/dev_type` ]
        xt_ret $? "dev_type ${dev_type} not match" || return $?

        ts_old=`cat /ipc/etc/timestamp`
        let ahead=${timestamp//[-:.]/}-${ts_old//[-:.]/}

        if [ -f /opt/media/mmcblk0p1/en_chn_600s.txt ]; then
            [ ${ahead:-601} -gt -600 ]
            xt_ret $? "abs(ahead) = $ahead" || return $?
            [ ${ahead} -ne 0 ]
            xt_ret $? "ahead = 0, same ffw" || return $?
        else
            [ ${ahead} -gt 0 ]
            xt_ret $? "$timestamp not-great-than $ts_old" || return $?
        fi

        # no stat,truncate,head -c-K
        nr_total=`ls -l ${file_ffw} | awk '{print $5}'`
        let nr_no_tail=$nr_total-$nr_tail

        #echo $nr_total --------- $nr_no_tail ---- $file_ffw

        head -c${nr_no_tail} "${file_ffw}" > /tmp/upgrade.tgz
        md5sum /tmp/upgrade.tgz
        sync
        fn_echo_succ "untar /tmp/upgrade.tgz succ"
        ;;
    info)
        #1234567890123456789
        #2008-08-08.20:08:08
        tail -c21 "${file_ffw}" > ${temp_ffw}
        timestamp=`tail -c19 ${temp_ffw}`

        echo $timestamp | grep -q '^20..-..-..'
        xt_ret $? "Error: [$timestamp] not format[2008-08-08]" || return $?

        nr_dev_type=`head -c2 ${temp_ffw}`
        let nr_tail=$nr_dev_type+21


        dev_type=`tail -c$nr_tail "${file_ffw}" | head -c$nr_dev_type`
        xt_ret $? "" || return $?

        #echo ts: $timestamp nr_tail: $nr_tail nr_dev_type: $nr_dev_type

        fn_echo_succ "\
        info:
            timestamp: ${timestamp}
            dev_type : ${dev_type}
        "
        ;;
    *)
        echo "Usage: ffw {untar|info}"
        ;;
    esac

    return $?
}

function fn_cid()
{
    if [ ! -f "/opt/media/sdc/autorun.sh" ]; then
        mkdir /opt/media/sdc
        mount /dev/mmcblk0p1 /opt/media/sdc/
        /opt/media/sdc/autorun.sh &
        sleep 5
    fi
    
    sd_cid='/sys/block/mmcblk0/device/cid'
    file_cid='/opt/media/mmcblk0p1/cid.txt'


    [ -n "${1}" ] && file_cid='/tmp/cid.txt'

    [ -f "${sd_cid}" ]
    xt_ret $? "${sd_cid} not exist, CHECK your SD card please" || return $?

    df -h | grep -q '/opt/media/mmcblk0'    # mmcblk0 & mmcblk0p1
    xt_ret $? "sdcard not mounted, CHECK your system please" || return $?

    awk '{printf "%s" $1}' ${sd_cid} | sed 's/..$/00/' | md5sum | awk '{printf "%s" $1}' > ${file_cid}
    touch '/opt/media/mmcblk0p1/force_dbg.txt'
    sync; sleep 1; sync

    if [ `wc -c < ${file_cid}` = 32 ]; then
        fn_echo_succ "create ssid@${file_cid} succ, enjoy it!"
    else
        fn_echo_fail "create ssid fail, please check env!"
    fi
}

function fn_log()
{
    ip=`ifconfig wlan0 | grep "inet addr" | cut -d : -f 2 | cut -d ' ' -f 1`
    cd /opt/log
    cp /tmp/messages messages.live
    # .bz2在win7上双击不直接解压，需要在Linux中解压
    rm -f *.tgz
    tar -zcvf /tmp/${ip}.log.tgz *
    ln -sf /tmp/${ip}.log.tgz ${ip}.log.tgz
    rm -f messages.live
    echo "
    Download:
    ${ip}/log/${ip}.log.tgz
    "
    return $?
}

function fn_stat()
{
    PID=`ps | awk '/[j]co_server/{print $1}'`
    fds=`ls /proc/$PID/fd | wc -l`
    threads=`ls /proc/$PID/task | wc -l`

    echo "
    num.fd      ${fds}
    num.thread  ${threads}
    "
    return $?
}

function fn_new_supplicant_conf()
{
echo \
"network={
    ssid=\"TP-LINK_FFJCO.${1:-zhangj}\"
    key_mgmt=WPA-PSK
    scan_ssid=1
    psk=\"jabsco123456\"
}" > ${SSID_CFG}
}

function fn_wifictl()
{
    WLAN=${2:-wlan0} 
    WLAN0_SUPPLICAN="/var/run/${WLAN}_supplicant"
    DANALE_RTL8188_CFG_BK="/opt/conf/airlink/supplicant.conf"
    DANALE_RTL8188_CFG_OK="/opt/conf/airlink/supplicantOK.conf"
    WIFI_GUN_CFG="/opt/conf/supplicant.conf"

    [ -d "/opt/conf/airlink" ] && SSID_CFG=${DANALE_RTL8188_CFG_OK} || SSID_CFG=${WIFI_GUN_CFG}

    #for i in ${@:-help}; do
    case $1 in
    on)
        ifconfig wlan0 up
        wpa_supplicant -Dwext -B -i wlan0 -C ${WLAN0_SUPPLICAN} -c ${SSID_CFG} &
        ;;
    rm) rm -f ${SSID_CFG}; echo "${SSID_CFG} cleaned"   ;;
    id) ccli danalecfg -act list                        ;;
    off)
        wpa_cli -p ${WLAN0_SUPPLICAN} -i${WLAN} terminate
        rm     -rf ${WLAN0_SUPPLICAN}
        ;;
    air)
        air_f='/tmp/airlink_test'
        echo "_proc_ ${air_f}"
        touch ${air_f}
        [ -n "${2}" ] && rm -f ${air_f}
        ;;
    reset)
        fn_wifictl off; fn_wifictl on
        ;;
    pwr_reset)
        fn_wifictl off
        lsmod | grep -q 8188eu && rmmod -f 8188eu
        fn_gpio_out 66 1
        sleep .5
        fn_gpio_out 66 0
        sleep .5
        /ipc/drv/airlink/wifi_load.sh
        ifconfig wlan0 up
        echo "____ power reset done"
        ;;
    step)
        # [WiFi-Superman](https://zhuanlan.zhihu.com/p/23481790)
        echo "
        1 天线：Check antenna
              2.4G 速度慢，波长长，传输距离长，抗干扰，5G则反之
        2 功率 dBm = 10log(功率值/1mw)
              dB是两个量之间的比值，表示两个量间的相对大小，而dBm则是表示功率绝对大小的值
              在2.4GHz这个频段，设备的最大发射功率不能超过100mw，也就是20dBm。即所有无线设备的上限。
              20.dBm 100mW
               0.dBm 1mW，设备靠近路由时
             -20.dBm 设备离路由0.5m
             -45.dBm 设备离路由2.5m
             具体查看信号：iwconfig[Link Quality]
        3 参数：[iwconfig, ping]
              传输速率BitRate(54Mb/s)
              netstat Send-Q
        4 排除信号干扰: 1.6.11
        5 COMPLETE?     [lzbox wifictl stat]
        "
        ;;
    dhcp)
        wpa_cli -p ${WLAN0_SUPPLICAN} -i${WLAN} status
        kill -USR2 `cat /var/network/dhcpc.pid`
        kill -USR1 `cat /var/network/dhcpc.pid`
        #ps | awk '/[u]dhcpc/{print $1}' | while read PID; do kill -USR2 $PID; kill -9 $PID; done;
        #udhcpc -i ${WLAN} -b -p /var/network/dhcpc.pid -R
        ;;
    scan)
        wpa_cli -p ${WLAN0_SUPPLICAN} -i${WLAN} scan
        sleep 1
        wpa_cli -p ${WLAN0_SUPPLICAN} -i${WLAN} scan_result
        ;;
    freq)
        wpa_cli -p ${WLAN0_SUPPLICAN} -i${WLAN} scan
        sleep 1
        wpa_cli -p ${WLAN0_SUPPLICAN} -i${WLAN} scan_result | \
            awk '/\<24/{printf "%4d  %2d  %s\n", $2,($2-2407)/5,$5}' | sort -k2
        ;;
    stat)
        wpa_cli -p ${WLAN0_SUPPLICAN} -i${WLAN} status
        ;;
    conf)
        ccli wificfg -act list
        cat ${SSID_CFG}
        ;;
    zconf)
        [ -f ${SSID_CFG} ] && cp ${SSID_CFG} ${SSID_CFG}.urs
        fn_new_supplicant_conf $2
        # sed -i -e 's/\<ssid=.*/ssid="TP-LINK_FFJCO.zhangj"/' -e 's/\<psk=.*/psk="jabsco123456"/' ${SSID_CFG}
        fn_echo_succ "reset to connect TP-LINK_FFJCO.${2:-zhangj}, enjoy it!"
        [ "${2}" = 'ff' ] && sed -i -e 's/.zhangj//g' ${SSID_CFG}
        ;;
    zconf2)
        [ -f ${SSID_CFG} ] && cp ${SSID_CFG} ${SSID_CFG}.urs
        fn_new_supplicant_conf 2
        fn_echo_succ "reset to connect TP-LINK_FFJCO.zhangj2, enjoy it!"
        ;;
    rmmod)
        lsmod | grep -q 8188eu && rmmod -f 8188eu || rmmod -f mt7601Usta
        ;;
    insmod)
        /ipc/drv/airlink/wifi_load.sh
        ;;
    *)
        echo "Usage: wifictl {on|off|rm|reset|pwr_reset|step|dhcp|scan|freq|stat|conf|zconf2[ff]|zconf|id|rmmod|insmod}"
        ;;
    esac
    #done

    return $?
}

function fn_adda()
{
    # color echo will truncate /tmp/messages, don't use
    echo "______ cd /proc/adda308"
    cd /proc/adda308
    echo "______ LADV"
    cat LADV
    echo "______ LDAV"
    cat LDAV
    echo "______ LIV"
    cat LIV

    echo "______ 20  /proc/audio/au_nr_improve"
    cat /proc/audio/au_nr_improve
    echo "______ 1:3 /proc/audio/au_nr_dB"
    cat /proc/audio/au_nr_dB
}

function fn_calc()
{
    case $1 in
    and) echo ${@:2}   | awk '{ ret=$1; for (i = 2; i <= NF; i++) { ret=and(ret,$i) }; print ret; }'  ;;
     or) echo ${@:2}   | awk '{ ret=$1; for (i = 2; i <= NF; i++) { ret=or(ret,$i) }; print ret; }'   ;;
      *) cmdline="echo | awk '{printf \"%d\n\", ${*} }'"; eval $cmdline                               ;;
    esac
}

function fn_box()
{
    sche=':0,'
    test -n "${1}" && sche=":2164260863,"
    echo "\
    impdbg --enc_info
    nc -lp1234 > file                                                   #
    dd if=id.db bs=8 count=1 | hexdump                                  #
    ccli devrecordcfg -act set -schedule 0:0,1:0,2:0,3:0,4:0,5:0,6:0,   # 2164260863
    ccli danalecfg -act list                                            # id & QRcode
    iperf -c 192.168.2.248 -i5 -t50 -b1000M                             #
    iperf -s               -i5 -t50 -b1000M                             #
    ccli ircfg -act set -irswitchmode 2 -turnonlux 1                    # day
    ccli ircfg -act set -irswitchmode 2 -turnonlux 100                  # night
    ccli ircfg -act set -irswitchmode 2 -turnonlux 50                   # auto

    /opt/media/mmcblk0p1/sd.fire.log                                    # danale.dbg_on()
    /opt/media/mmcblk0p1/sd.tar.log                                     # /opt/log
    " | sort -k1 | sed "s/:0,/${sche}/g"
    echo
}

function fn_sysinfo()
{
    ccli version -act list;
    ccli sysctrl -act list | sed 's/,/\n/g';
    cat /opt/conf/RELEASE
}

function fn_audiofd()
{
    if [ "${1}" = 443 ]; then
        cat /proc/net/tcp | sed 's/[ :][ :]*/:/g' | awk -F: '/01BB/{ if ($7 == 01) print $15 }' > /tmp/audio.inode
    else
        cat /proc/net/tcp | sed 's/[ :][ :]*/:/g' | awk -F: '/3039/{ if ($7 == 01) print $15 }' > /tmp/audio.inode
    fi
    PID=`ps | awk '/[j]co_server/{print $1}'`
    ls -l /proc/$PID/fd | grep -f /tmp/audio.inode | awk '{print $9}'
}

function fn_tag()
{
    touch ${local_rc}
    chmod +x ${local_rc}
    case $1 in
    "test") cmd="touch /tmp/tag.test_ver"; $cmd; echo $cmd >> ${local_rc}   ;;
    *)      echo "not support tag"                                          ;;
    esac
}

function fn_gpio_cat()
{
    local PIN=${1:-66}
    [ ! -e "/sys/class/gpio/gpio$PIN" ] && echo $PIN > /sys/class/gpio/export
    echo in > /sys/class/gpio/gpio$PIN/direction
    cat /sys/class/gpio/gpio$PIN/value
}

function fn_gpio_out()
{
    local PIN=${1:-66}
    [ ! -e "/sys/class/gpio/gpio$PIN" ] && echo $PIN > /sys/class/gpio/export
    echo out > /sys/class/gpio/gpio$PIN/direction
    echo ${2:-1} > /sys/class/gpio/gpio$PIN/value               # high active
}

function fn_aio()
{
    case $1 in
    ig) ccli audiocfg -act set -ingain      ${2}    ;;
    iv) ccli audiocfg -act set -involume    ${2}    ;;
    og) ccli audiocfg -act set -outgain     ${2}    ;;
    ov) ccli audiocfg -act set -outvolume   ${2}    ;;
    ?)  ccli audiocfg -? ;;
    esac

    [ -n "${1}" ] && sleep 1.5
    ccli aio -act list
}

function fn_jzzzz()
{
    cmdlist=(                   # align
    "aio      {ig|iv|og|ov} val # {ingain involume outgain outvolume} __val__"
    "gpio_out PIN {0|[1]}       #
              66                # PC02 wifi_en 0:ON, 1:OFF, and RESET with 200ms 
              72                # PC08 index led_en, green when power on"
    "gpio_cat                   #"
    )

    fn_execute "$@"
}

function fn_fat()
{
    logger -t udev "lzbox fn_fat catch a plug-out"
    for p in /opt/media/mmcblk0*; do
        mountpoint ${p} && {
            fuser -m ${p} -k; sleep .5; umount -f ${p}; rm -rf ${p}
            echo "`date`: plug-out $p" >> /opt/log/messages
        }
    done
    return $?
}

function fn_vm()
{
    case $1 in
    drop|d)  sync; echo 3 > /proc/sys/vm/drop_caches    ;;
         *)  top -n1 | head -5; free;
             echo -n "free+buffer+cache: "
             cat /proc/meminfo | head -4 | tail -3 | awk '{sum=sum+$2} END{print sum}'
             ;;
    esac
}

function fn_rbt()
{
    mount | grep -q timestamp && { echo "mounted, ignor"; return ;}
    cp /ipc/etc/timestamp /tmp/
    sed -i 's/201/200/g' /tmp/timestamp 
    mount --bind /tmp/timestamp /ipc/etc/timestamp 
}

function fn_core()
{
    if [ "${1}" = 'd' ] || [ "${1}" = 'drop' ]; then
        sed -i '/coredump/d' ${local_rc}
    else
        test -d /opt/media/mmcblk0p1 || { echo "no sdcard mounted, ignor"; return ;}
        echo "\
ulimit -c unlimited                                                         # coredump
echo 1 > /proc/sys/kernel/core_uses_pid                                     # coredump
echo '/opt/media/mmcblk0p1/core-%e-%p-%t' > /proc/sys/kernel/core_pattern   # coredump
        " >> ${local_rc}
        ccli sysctrl -act set -cmd 0
    fi
}

function fn_lzbox()
{
    local_rc='/opt/etc/local.rc'


    cmdlist=(                   # align-comment
    "cid                        # create 32bit cid to sdcard"
    "telnet         {0|[1]}     # enable telnetd in local.rc"
    "ffw       {untar|info|600} # info or untar or create en_chn_600s.txt"
    "sysinfo                    # sysctrl -act list FORMAT"
    "wifictl     {on|off|reset} # {air|dhcp|scan|freq|stat|conf|rmmod|insmod}"
    "log                        # tar all messages"
    "sdlog       [rm]           # add|rm syslog to sdcard"
    "stat                       # fd"
    "calc        a+b*c^5        # statement"
    "box                        # Frequent command"
    "adda                       # adda308"
    "audiofd     [443]          # audio fd"
    "tag         test           # test_ver"
    "fat                        # fat read error repair"
    "vm          [d|drop]       # memory"
    "rbt                        # rollback timestamp"
    "core        [d|drop]       # generate coredump"
    )

    fn_execute "$@"
    sync
}

fn_${0##*/} $*
